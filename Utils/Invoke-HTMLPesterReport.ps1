function Invoke-HTMLPesterReport {
    <#
    .SYNOPSIS
       Generate HTML report for Pester test results using ReportUnit.exe
    .DESCRIPTION
        Using Pester's ‘OutputFile’ and ‘OutputFormat’ test results are turned into an XML in NUnit compatible format. 
        The .xml file can be imported into tools like TeamCity in order to view test results in a human readable way. 
        For people without access to full-fledged development tools, there is ReportUnit an open source command line tool
        that automatically transforms the XML into a nice HTML report.
        This is a PowerShell wrapper for ReportUnit. 
        ReportUnit is required within the same path of the script. If ReportUnit is not present, the function will automatically download it.
    .PARAMETER NUnitXmlPath
       Path the NUnitXML file generated by running  Invoke-Pester -OutputFile <PATH> -OutputFormat NUnitXml
    .EXAMPLE
        #create test functions
        $tempFolder = New-Item "$env:Temp\PesterTest" -ItemType Directory -force
        foreach ($num in (1..10)){
            $functionTemplate =  @"
        function Test$num {
            $(if ($Num -eq 8){
                "$($num + 1)"
                }else{
                "$num"
                }
            )
        }
"@ | Set-Content -Path (Join-Path $tempFolder "Test$num.ps1")
        #create tests against test functions
        $testTemplate = @"
        `$here = Split-Path -Parent `$MyInvocation.MyCommand.Path
        `$sut = (Split-Path -Leaf `$MyInvocation.MyCommand.Path) -replace '\.Tests\.', '.'
        . "`$here\`$sut"
        Describe "Test$num" {
            It "Should output $num" {
                Test$num | Should Be $num
            }
        }
"@ | Set-Content -Path (Join-Path $tempFolder "Test$num.Tests.ps1")
        }
        Push-Location $tempFolder
        #Invoke pester and generate NUnitXML output format
        Invoke-Pester -OutputFile report.xml -OutputFormat NUnitXml
        #feed the xml into the function
        Invoke-GUIPesterReport $tempFolder\report.xml
    .LINK
        https://powershellone.wordpress.com/2016/05/18/reporting-against-pester-test-results/
    .LINK
        http://relevantcodes.com/Tools/ReportUnit
    #>
	[CmdletBinding()]
	param()
    
    $url = 'http://relevantcodes.com/Tools/ReportUnit/reportunit-1.2.zip'
    $fullPath = Join-Path $PSScriptRoot $url.Split("/")[-1]
    if (!Test-Path $fullPath){
        $a = New-Object -COMObject WScript.Shell
        $message = 'The function requires ReportUnit in the same folder as the script. Do you want to download ReportUnit now?'
        $answer = $a.popup($message, 0,"Download",4)
	    If ($answer -eq 6) {
            #download and extract ReportUnit.exe
            (New-Object Net.WebClient).DownloadFile($url,$fullPath)
            (New-Object -ComObject Shell.Application).Namespace($tempFolder.FullName).CopyHere((New-Object -ComObject Shell.Application).Namespace($fullPath).Items(),16)
            Remove-Item $fullPath
        }
        else{
            Write-Warning "ReportUnit.exe is required. Please download and extract it into '$PSScriptRoot'. Exiting"
            exit
        }
    }
    #run reportunit against report.xml and display result in browser
    & .\reportunit.exe $NUnitXmlPath
    Invoke-Item report.html
}